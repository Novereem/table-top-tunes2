name: TableTopTunes CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}
  
jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      USE_IN_MEMORY: "true"
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
      JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}
      DEVELOPMENT: "false"
      DISABLE_CLAMAV: "false"
    steps:
      - name: Check out the code
        uses: actions/checkout@v3
        
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: nuget-
        
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Start ClamAV daemon clamd
        uses: toblux/start-clamd-github-action@v0.2.1
        with:
          unix_socket: /tmp/clamd.socket
          tcp_port: 3310
          stream_max_length: "1M"

      - name: Ping clamd on TCP port 3310
        run: echo PING | nc localhost 3310

      - name: Ping clamd using Unix socket
        run: echo PING | nc -U /tmp/clamd.socket
        
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Clean the project
        run: dotnet clean

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run unit tests
        run: dotnet test --configuration Release --no-build --filter "Category=Unit" --verbosity normal

      - name: Run integration tests
        run: dotnet test --configuration Release --no-build --filter "Category=Integration" --verbosity normal
            
      - name: Run endpoint tests
        run: dotnet test --configuration Release --no-build --filter "Category=Endpoint" --verbosity normal
  
  docker-build:
    environment: Deployment
    permissions:
      contents: read
      packages: write
    needs: tests
    runs-on: ubuntu-latest

    outputs:
      image_name: ${{ steps.vars.outputs.image_name }}
    
    steps:
      - uses: actions/checkout@v3
          
      - name: Set lowercase IMAGE_NAME
        id: vars
        run: |
          IMAGE_NAME_LC="ghcr.io/${GITHUB_REPOSITORY,,}"
          echo "IMAGE_NAME_LC=$IMAGE_NAME_LC" >> $GITHUB_ENV
          echo "image_name=$IMAGE_NAME_LC" >> $GITHUB_OUTPUT
            
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME_LC }}:${{ github.sha }}
            ${{ github.ref == 'refs/heads/main' && format('{0}:latest', env.IMAGE_NAME_LC) || '' }}

  load-test:
    environment: Deployment
    needs: docker-build
    runs-on: ubuntu-latest
    env:
      DB_CONNECTION_STRING: >-
        server=mysql;
        port=3306;
        database=${{ secrets.DB_NAME }};
        user=${{ secrets.DB_USER }};
        password=${{ secrets.DB_PASSWORD }};
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
      JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}
      DEVELOPMENT: "false"
      DISABLE_CLAMAV: "false"
      
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
          
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      - uses: actions/checkout@v3
  
      - name: Export IMAGE_NAME_LC
        run: |
          echo "IMAGE_NAME_LC=${{ needs.docker-build.outputs.image_name }}" >> $GITHUB_ENV
  
      - name: Debug
        run: echo "IMAGE_NAME_LC=$IMAGE_NAME_LC, SHA=$GITHUB_SHA"
  
      - name: Pull backend image
        run: docker pull $IMAGE_NAME_LC:$GITHUB_SHA

      - name: Wait for MySQL to be healthy
        run: |
          for i in {1..30}; do
            if docker inspect --format '{{json .State.Health.Status}}' $(docker ps -q --filter "ancestor=mysql:8.0") | grep -q healthy; then
              echo "MySQL is healthy!"
              exit 0
            fi
            echo "waiting for MySQL… ($i/30)"
            sleep 2
          done
          echo "MySQL did not become healthy" && exit 1

      - name: Start backend container
        run: |
          docker run -d --name ttt-backend \
            --network ${{ job.services.mysql.network }} \
            -e ConnectionStrings__Default="$DB_CONNECTION_STRING" \
            -e JWT_SECRET_KEY -e JWT_ISSUER -e JWT_AUDIENCE \
            -p 8080:80 \
            $IMAGE_NAME_LC:$GITHUB_SHA

      - name: Wait for API to be healthy
        run: |
          for i in {1..30}; do
            curl -sf http://localhost:8080/health && exit 0
            echo "waiting for API… ($i/30)"; sleep 2
          done
          echo "API did not become healthy"; exit 1
      
      - name: Show container’s environment
        run: |
          echo "===== ENV inside ttt-backend ====="
          docker exec ttt-backend env | sort
      
      - name: List running containers
        run: docker ps -a
      
      - name: Show Backend Logs
        run: |
          # Wait a few seconds, then show the last 50 lines from the ttt-backend container
          sleep 5
          docker logs --tail 50 ttt-backend || echo "No logs (container may have exited)"

      - name: Show MySQL logs
        run: |
          CID=$(docker ps -q --filter "ancestor=mysql:8.0")
          docker logs --tail 50 "$CID"
      
      - name: Setup k6
        uses: grafana/setup-k6-action@v1

      - name: Run k6 smoke test
        uses: grafana/run-k6-action@v1
        with:
          path: k6/smoke.js
          
  deploy-staging:
    environment: Deployment
    name: Deploy to Railway (Staging)
    needs: load-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    container: ghcr.io/railwayapp/cli:latest

    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
      RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID_STAGING }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy to Railway (Staging)
        run: railway up --detach

      - name: Get Staging URL
        id: stageurl
        run: |
          URL=$(railway service info \
                --service="${{ env.SVC_ID }}" \
                --environment Staging \
                --json \
              | jq -r '.domains[0]')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Wait for /health to return 200
        run: |
          URL=$(railway service info \
                --service="${{ env.SVC_ID }}" \
                --environment Staging \
                --json \
              | jq -r '.domains[0]')

          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' "https://$URL/health")
            if [ "$STATUS" = "200" ]; then
              echo "Staging is healthy!"
              exit 0
            fi
            echo "waiting for /health… ($i/30)"
            sleep 3
          done

          echo "ERROR: Staging never became healthy" && exit 1

        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}

      - name: Set up k6
        uses: grafana/setup-k6-action@v1

      - name: Run k6 smoke test against Staging
        uses: grafana/run-k6-action@v1
        with:
          path: k6/smoke.js
          args: |
            -e BASE_URL="https://${{ steps.stageurl.outputs.url }}/"
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
  