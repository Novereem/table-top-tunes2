name: TableTopTunes CI Pipeline

on:
  push:
    branches:
      - main
      - 17-us9-application-capacity-testing
  pull_request:
    branches:
      - main
      - 17-us9-application-capacity-testing

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}
  DB_CONNECTION_STRING: >-
    server=127.0.0.1;
    port=3306;
    database=${{ secrets.DB_NAME }};
    user=${{ secrets.DB_USER }};
    password=${{ secrets.DB_PASSWORD }};
  
jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      USE_IN_MEMORY: "true"
      DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
      JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}
      DEVELOPMENT: "false"
      DISABLE_CLAMAV: "false"
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Start ClamAV daemon clamd
        uses: toblux/start-clamd-github-action@v0.2.1
        with:
          unix_socket: /tmp/clamd.socket
          tcp_port: 3310
          stream_max_length: "1M"

      - name: Ping clamd on TCP port 3310
        run: echo PING | nc localhost 3310

      - name: Ping clamd using Unix socket
        run: echo PING | nc -U /tmp/clamd.socket
        
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Clean the project
        run: dotnet clean

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run unit tests
        run: dotnet test --configuration Release --no-build --filter "Category=Unit" --verbosity normal

      - name: Run integration tests
        run: dotnet test --configuration Release --no-build --filter "Category=Integration" --verbosity normal
            
      - name: Run endpoint tests
        run: dotnet test --configuration Release --no-build --filter "Category=Endpoint" --verbosity normal

      - name: Start ASP.NET Core app
        run: |
          nohup dotnet run --configuration Release --project ./TTTBackend/TTTBackend.csproj --urls "https://localhost:7041" &
          sleep 10
  
  docker-build:
    needs: tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ github.ref == 'refs/heads/main' && env.IMAGE_NAME }}:latest

  load-test:
    needs: docker-build
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: tttdb
          MYSQL_USER: tttuser
          MYSQL_PASSWORD: tttpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      - uses: actions/checkout@v3

      - name: Pull backend image
        run: docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Start backend container
        run: |
          docker run -d --name ttt-backend \
            --network host \
            -e ConnectionStrings__Default="${{ env.DB_CONNECTION_STRING }}" \
            -p 8080:80 \
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Wait for API to be healthy
        run: |
          for i in {1..30}; do
            curl -sf http://localhost:8080/api/health && break
            echo "waitingâ€¦" && sleep 2
          done
      
      - name: Setup k6
        uses: grafana/setup-k6-action@v0.4.0          :contentReference[oaicite:0]{index=0}

      - name: Run k6 smoke test
        uses: grafana/run-k6-action@v0.3.0            :contentReference[oaicite:1]{index=1}
        with:
          script: k6/smoke.js
          summary: true